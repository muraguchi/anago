// Irem: Meikyujima(J)
board <- {
	mappernum = 32,
	cpu_romsize = 0x20000, cpu_banksize = 0x4000,
	ppu_romsize = 0x20000, ppu_banksize = 0x2000,
	ppu_ramfind = false, vram_mirrorfind = true
};

/*
 These are not Disch's original notes:
 ========================
 =  Mapper 032          =
 ========================
 
 Example Games:
 --------------------------
 Image Fight
 Major League
 Kaiketsu Yanchamaru 2
   
 Registers:
 --------------------------
 
 Range,Mask:   $8000-BFFF, $F007
 
   $8000-$8007:  [...P PPPP]    PRG Reg 0
   $9000-$9007:  [.... ..PM]  ** see footnote
       P = PRG Mode
       M = Mirroring (0=Vert, 1=Horz)
   $A000-$A007:  [...P PPPP]    PRG Reg 1
   $B000-$B007:  [CCCC CCCC]    CHR Regs
 
 
 PRG Setup:
 ---------------------------
 
                $8000   $A000   $C000   $E000  
              +-------+-------+-------+-------+
 PRG Mode 0:  | $8000 | $A000 | { -2} | { -1} |
              +-------+-------+-------+-------+
 PRG Mode 1:  | { -2} | $A000 | $8000 | { -1} |
              +-------+-------+-------+-------+
 
 
 CHR Setup:
 ---------------------------
 
       $0000   $0400   $0800   $0C00   $1000   $1400   $1800   $1C00 
     +-------+-------+-------+-------+-------+-------+-------+-------+
     | $B000 | $B001 | $B002 | $B003 | $B004 | $B005 | $B006 | $B007 |
     +-------+-------+-------+-------+-------+-------+-------+-------+

 Footnote:
 --------------------------
 Major League wants hardwired 1-screen mirroring. (CIRAM A10 is tied to +5V
 on this game). Additionally, the register at $9000 is entirely disabled: 
 the game can only request "PRG mode 0".

 A NES 2.0 submapper has been assigned for this difference.
 Otherwise you'll have to use a hash check.
Naruko says that only the game "愛先生の OSHIETE 私の星" uses PRG mode 1, which is why it was documented incorrectly for so long.

*/


function cpu_dump(d, pagesize, banksize)
{
	cpu_write(d, 0x9000, 0);
	for(local i=0; i<(pagesize-1);i++){
		  cpu_write(d, 0x8000, (2*i)+0);
		  cpu_write(d, 0xA000, (2*i)+1);
		  cpu_read(d, 0x8000, banksize);
	}
	cpu_read(d, 0xC000, banksize);
}
function ppu_dump(d, pagesize, banksize)
{
	for(local i=0; i<pagesize;i++){
		  cpu_write(d, 0xB000, (8*i)+0);
		  cpu_write(d, 0xB001, (8*i)+1);
		  cpu_write(d, 0xB002, (8*i)+2);
		  cpu_write(d, 0xB003, (8*i)+3);
		  cpu_write(d, 0xB004, (8*i)+4);
		  cpu_write(d, 0xB005, (8*i)+5);
		  cpu_write(d, 0xB006, (8*i)+6);
		  cpu_write(d, 0xB007, (8*i)+7);
		  ppu_read(d,0x0000,banksize);
	}
}
